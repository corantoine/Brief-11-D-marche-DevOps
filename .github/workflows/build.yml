name: Build & Release

on:
  push:
    branches: 
      - main
      - beta 

permissions:
  contents: write

jobs:
  get-version:
    uses: shiipou/github-actions/.github/workflows/get-version.yml@main
    with:
      prerelease-branches: '^(beta)$'
      release-branches: '^(main)$'
      
  build:
    name: Rust build
    runs-on: ubuntu-latest
    #si get-version voit un commit qui permet une release (mont√©e de version), il fait le build, sinon fait pas le build
    if: ${{ needs.get-version.outputs.will-release == 'true' }}
    needs: 
      - get-version
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            target: wasm32-unknown-unknown
      - name: trunk
        uses: jetli/trunk-action@v0.5.0
      - name: Build with Trunk
        env:
          VERSION: "${{ needs.get-version.outputs.version }}"
        run: trunk build --release
      - uses: actions/upload-artifact@v4
        with:
          name: rust
          path: dist/*

          
# Job de release
  release: 
    name: Release
    runs-on: ubuntu-latest
    needs: [ get-version, build ]
    steps: 
    - name: Download artifacts
      uses: actions/download-artifact@v4.1.8
      with:
        name: rust
        path: dist/
    - name: Zip files artifacts
      run: zip -r artifacts.zip dist/*
    - name: Create Github Release
      env:
        VERSION: "${{ needs.get-version.outputs.version }}"
        #github nous donne le repository dans lequel on est, = nomD'Utilisateur/NomDuRepo
        REPO: "${{ github.repository }}"
        COMMIT: "${{ github.sha }}"
        GH_TOKEN: "${{ github.token }}"
      run: |
        if [ needs.get-version.outputs.is-prerelease ]
        then
        gh prerelease create --repo $REPO --target $COMMIT $VERSION artifacts.zip
        else
        gh release create --repo $REPO --target $COMMIT $VERSION artifacts.zip
        fi
